{"version":3,"file":"main.be14b4a28feacbf73fa4.bundle.js","sources":["webpack:///./src/geo/mercator_coordinate.ts"],"sourcesContent":["import LngLat, { LngLatLike } from './lng_lat';\n\n/*\n * The circumference of the world in meters at the given latitude.\n */\nfunction circumferenceAtLatitude(latitude: number) {\n  const circumference = 2 * Math.PI * 6378137;\n  return circumference * Math.cos(latitude * Math.PI / 180);\n}\n\nexport function mercatorXfromLng(lng: number) {\n  return (180 + lng) / 360;\n}\n\nexport function mercatorYfromLat(lat: number) {\n  return (180 - (180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360)))) / 360;\n}\n\nexport function mercatorZfromAltitude(altitude: number, lat: number) {\n  return altitude / circumferenceAtLatitude(lat);\n}\n\nexport function lngFromMercatorX(x: number) {\n  return x * 360 - 180;\n}\n\nexport function latFromMercatorY(y: number) {\n  const y2 = 180 - y * 360;\n  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\n\nexport function altitudeFromMercatorZ(z: number, y: number) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * A `MercatorCoordinate` object represents a projected three dimensional position.\n *\n * `MercatorCoordinate` uses the web mercator projection ([EPSG:3857](https://epsg.io/3857)) with slightly different units:\n * - the size of 1 unit is the width of the projected world instead of the \"mercator meter\"\n * - the origin of the coordinate space is at the north-west corner instead of the middle\n *\n * For example, `MercatorCoordinate(0, 0, 0)` is the north-west corner of the mercator world and\n * `MercatorCoordinate(1, 1, 0)` is the south-east corner. If you are familiar with\n * [vector tiles](https://github.com/mapbox/vector-tile-spec) it may be helpful to think\n * of the coordinate space as the `0/0/0` tile with an extent of `1`.\n *\n * The `z` dimension of `MercatorCoordinate` is conformal. A cube in the mercator coordinate space would be rendered as a cube.\n *\n * @param {number} x The x component of the position.\n * @param {number} y The y component of the position.\n * @param {number} z The z component of the position.\n * @example\n * var nullIsland = new mapboxgl.MercatorCoordinate(0.5, 0.5, 0);\n *\n * @see [Add a custom style layer](https://www.mapbox.com/mapbox-gl-js/example/custom-style-layer/)\n */\nclass MercatorCoordinate {\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(x: number, y: number, z: number = 0) {\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  /**\n   * Project a `LngLat` to a `MercatorCoordinate`.\n   *\n   * @param {LngLatLike} lngLatLike The location to project.\n   * @param {number} altitude The altitude in meters of the position.\n   * @returns {MercatorCoordinate} The projected mercator coordinate.\n   * @example\n   * var coord = mapboxgl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\n   * coord; // MercatorCoordinate(0.5, 0.5, 0)\n   */\n  static fromLngLat(lngLatLike: LngLatLike, altitude: number = 0) {\n    const lngLat = LngLat.convert(lngLatLike);\n\n    return new MercatorCoordinate(\n      mercatorXfromLng(lngLat.lng),\n      mercatorYfromLat(lngLat.lat),\n      mercatorZfromAltitude(altitude, lngLat.lat));\n  }\n\n  /**\n   * Returns the `LngLat` for the coordinate.\n   *\n   * @returns {LngLat} The `LngLat` object.\n   * @example\n   * var coord = new mapboxgl.MercatorCoordinate(0.5, 0.5, 0);\n   * var latLng = coord.toLngLat(); // LngLat(0, 0)\n   */\n  toLngLat() {\n    return new LngLat(\n      lngFromMercatorX(this.x),\n      latFromMercatorY(this.y));\n  }\n\n  /**\n   * Returns the altitude in meters of the coordinate.\n   *\n   * @returns {number} The altitude in meters.\n   * @example\n   * var coord = new mapboxgl.MercatorCoordinate(0, 0, 0.02);\n   * coord.toAltitude(); // 6914.281956295339\n   */\n  toAltitude() {\n    return altitudeFromMercatorZ(this.z, this.y);\n  }\n}\n\nexport default MercatorCoordinate;\n"],"mappings":"AAAA","sourceRoot":""}